<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FocusFlow - Creative Task Tracker</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Pacifico&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        :root {
            --primary-color: #3f51b5;
            --secondary-color: #2196f3;
            --accent-color: #ff4081;
            --background-color: #f5f7fa;
            --text-color: #333;
            --card-background: #ffffff;
            --border-radius: 12px;
            --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Inter', sans-serif;
            background-color: var(--background-color);
            color: var(--text-color);
            line-height: 1.6;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        header {
            background-color: var(--primary-color);
            color: white;
            padding: 1rem;
            width: 100%;
        }

        .header-content {
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .logo {
            font-family: 'Pacifico', cursive;
            font-size: 2rem;
            display: flex;
            align-items: center;
        }

        .logo i {
            margin-right: 0.5rem;
        }

        .container {
            width: 80%;
            margin: 2rem auto;
            display: flex;
            gap: 2rem;
            flex-grow: 1;
        }

        .dashboard {
            display: flex;
            flex-direction: column;
            gap: 1rem;
            flex: 2;
        }

        .card {
            background-color: var(--card-background);
            border-radius: var(--border-radius);
            padding: 1rem;
            box-shadow: var(--box-shadow);
        }

        .card h2 {
            margin-top: 0;
            font-size: 1.25rem;
            color: var(--primary-color);
            display: flex;
            align-items: center;
        }

        .card h2 i {
            margin-right: 0.5rem;
        }

        .time-display {
            font-size: 2rem;
            font-weight: 600;
            margin: 0.5rem 0;
            color: var(--secondary-color);
        }

        .input-group {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        input[type="number"] {
            width: 60px;
            padding: 0.5rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        input[type="number"]:focus {
            outline: none;
            border-color: var(--secondary-color);
        }

        .btn {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 4px;
            cursor: pointer;
            font-size: 1rem;
            transition: background-color 0.3s ease, transform 0.1s ease;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }

        .btn i {
            margin-right: 0.5rem;
        }

        .btn:hover {
            background-color: var(--secondary-color);
        }

        .btn:active {
            transform: scale(0.98);
        }

        .btn-secondary {
            background-color: #e0e0e0;
            color: var(--text-color);
        }

        .btn-secondary:hover {
            background-color: #d0d0d0;
        }

        .task-container {
            position: relative;
            margin-bottom: 1rem;
        }

        #task-input {
            font-size: 1.2rem;
            padding: 1rem 1rem 1rem 3rem;
            border: 2px solid var(--primary-color);
            border-radius: var(--border-radius);
            width: 100%;
            transition: all 0.3s ease;
            background-color: #f9f9f9;
        }

        #task-input:focus {
            outline: none;
            box-shadow: 0 0 0 3px rgba(63, 81, 181, 0.3);
            background-color: white;
        }

        .task-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--primary-color);
            font-size: 1.5rem;
        }

        #task-display {
            font-size: 1.5rem;
            font-weight: 600;
            margin: 1rem 0;
            color: var(--accent-color);
            text-align: center;
            min-height: 2.5rem;
        }

        #time-remaining {
            font-size: 1.2rem;
            color: var(--secondary-color);
            text-align: center;
            margin-top: 1rem;
            font-weight: 500;
        }

        .task-emoji {
            font-size: 2rem;
            margin-right: 0.5rem;
            vertical-align: middle;
        }

        .button-group {
            display: flex;
            gap: 1rem;
            margin-top: 1rem;
        }

        .finished-tasks {
            flex: 1;
            background-color: var(--card-background);
            border-radius: var(--border-radius);
            padding: 1rem;
            box-shadow: var(--box-shadow);
        }

        .finished-tasks h2 {
            color: var(--primary-color);
            margin-top: 0;
        }

        .task-list {
            list-style-type: none;
            padding: 0;
            max-height: 300px;
            overflow-y: auto;
        }

        .task-item {
            background-color: #f0f0f0;
            border-radius: 4px;
            padding: 0.75rem;
            margin-bottom: 0.75rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .task-name {
            font-weight: 600;
        }

        .task-time {
            color: var(--secondary-color);
        }

        .current-task-box {
            background-color: var(--accent-color);
            color: white;
            border-radius: var(--border-radius);
            padding: 1rem;
            margin-bottom: 1rem;
            display: none;
        }

        .current-task-box h2 {
            margin: 0;
            font-size: 1.5rem;
            display: flex;
            align-items: center;
        }

        .current-task-box h2 i {
            margin-right: 0.5rem;
        }

        .current-task-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 0.5rem;
        }

        .current-task-name {
            font-size: 1.2rem;
            font-weight: 600;
        }

        .current-task-time {
            font-size: 1.2rem;
            font-weight: 600;
        }

        footer {
            background-color: var(--primary-color);
            color: white;
            padding: 0.5rem;
            text-align: center;
            font-size: 0.8rem;
            width: 100%;
            margin-top: auto;
        }

        footer p {
            margin: 0.2rem 0;
        }

        footer a {
            color: white;
            text-decoration: none;
        }

        footer a:hover {
            text-decoration: underline;
        }

        @media (max-width: 768px) {
            .container {
                width: 95%;
                flex-direction: column;
            }
        }
        #active-tasks-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.active-task-box {
    background-color: var(--card-background);
    border-radius: var(--border-radius);
    padding: 1rem;
    box-shadow: var(--box-shadow);
    transition: background-color 0.3s ease, color 0.3s ease;
}

.active-task-box h3 {
    margin: 0 0 0.5rem 0;
    font-size: 1.2rem;
}

.active-task-box p {
    margin: 0 0 0.5rem 0;
    font-size: 1rem;
}

.task-buttons {
    display: flex;
    gap: 0.5rem;
}

.task-buttons .btn {
    font-size: 0.9rem;
    padding: 0.5rem 1rem;
}

footer {
        background-color: var(--primary-color);
        color: white;
        padding: 1rem;
        font-size: 1rem;
    }

    .footer-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
        max-width: 1200px;
        margin: 0 auto;
    }

    .footer-logo {
        font-family: 'Pacifico', cursive;
        font-size: 1.5rem;
        display: flex;
        align-items: center;
    }

    .footer-logo i {
        margin-right: 0.5rem;
    }

    .footer-info {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .author-name {
        font-weight: bold;
    }

    .social-links {
        display: flex;
        gap: 0.5rem;
    }

    footer a {
        color: white;
        text-decoration: none;
        transition: color 0.3s ease;
    }

    footer a:hover {
        color: var(--accent-color);
    }

    .social-links i {
        font-size: 1.2rem;
    }

    @media (max-width: 768px) {
        .footer-content {
            flex-direction: column;
            text-align: center;
        }

        .footer-logo {
            margin-bottom: 1rem;
        }

        .footer-info {
            flex-direction: column;
            gap: 0.5rem;
        }
    }
    </style>
</head>
<body>
    <header>
        <div class="header-content">
            <div class="logo"><i class="fas fa-brain"></i> FocusFlow</div>
        </div>
    </header>

 <main class="container">
    <div class="dashboard">
        <div id="active-tasks-container"></div>
        <div class="card">
            <h2><i class="fas fa-lightbulb"></i> New Task</h2>
            <div class="task-container">
                <i class="fas fa-rocket task-icon"></i>
                <input type="text" id="task-input" placeholder="What amazing goal will you achieve next?">
            </div>
            <div class="input-group">
                <input type="number" id="hours" min="0" placeholder="HH">
                <input type="number" id="minutes" min="0" max="59" placeholder="MM">
                <input type="number" id="seconds" min="0" max="59" placeholder="SS">
            </div>
            <div class="button-group">
                <button id="start-pause-btn" class="btn"><i class="fas fa-play"></i> Start New Task</button>
                <button id="reset-btn" class="btn btn-secondary"><i class="fas fa-redo"></i> Reset All</button>
            </div>
        </div>
        <div class="card">
            <h2><i class="fas fa-calendar-check"></i> Total Time Worked</h2>
            <div id="total-time-worked" class="time-display">00:00:00</div>
        </div>
    </div>
    <div class="finished-tasks">
        <h2><i class="fas fa-check-circle"></i> Finished Tasks</h2>
        <ul id="task-list" class="task-list"></ul>
    </div>
</main>

<footer>
    <div class="footer-content">
        <div class="footer-logo">
            <i class="fas fa-brain"></i> FocusFlow
        </div>
        <div class="footer-info">
            <span class="author-name">Mouad Garwan</span>
            <div class="social-links">
                <a href="mailto:contact@garwan.net" title="Email">
                    <i class="fas fa-envelope"></i>
                </a>
                <a href="https://www.instagram.com/mouad_garwan" target="_blank" title="Instagram">
                    <i class="fab fa-instagram"></i>
                </a>
                <a href="https://www.facebook.com/mouad.garwan" target="_blank" title="Facebook">
                    <i class="fab fa-facebook"></i>
                </a>
            </div>
        </div>
    </div>
</footer>

    <audio id="alarm" src="https://assets.mixkit.co/sfx/preview/mixkit-achievement-bell-600.mp3"></audio>
<script>
    let tasks = [];
    let totalTimeWorked = 0;
    let timerInterval;

    const taskInput = document.getElementById('task-input');
    const startBtn = document.getElementById('start-pause-btn');
    const resetBtn = document.getElementById('reset-btn');
    const totalTimeWorkedEl = document.getElementById('total-time-worked');
    const taskListEl = document.getElementById('task-list');
    const activeTasksContainer = document.getElementById('active-tasks-container');
    const alarm = document.getElementById('alarm');

    const taskEmojis = ['🚀', '💪', '🏆', '🌟', '🎯', '💡', '🔥', '✨'];

    function startNewTask() {
        const hours = parseInt(document.getElementById('hours').value) || 0;
        const minutes = parseInt(document.getElementById('minutes').value) || 0;
        const seconds = parseInt(document.getElementById('seconds').value) || 0;
        const duration = hours * 3600 + minutes * 60 + seconds;

        if (!taskInput.value.trim()) {
            alert("Please enter an inspiring task.");
            return;
        }

        const newTask = {
            id: Date.now(),
            name: taskInput.value,
            duration: duration,
            timeRemaining: duration,
            timeWorked: 0,
            isRunning: false,
            isOpenEnded: duration === 0,
            icon: taskEmojis[Math.floor(Math.random() * taskEmojis.length)]
        };

        tasks.push(newTask);
        updateTasksDisplay();
        startTimer(newTask.id);

        // Clear input fields
        taskInput.value = '';
        document.getElementById('hours').value = '';
        document.getElementById('minutes').value = '';
        document.getElementById('seconds').value = '';
    }

    function startTimer(taskId) {
        const taskIndex = tasks.findIndex(task => task.id === taskId);
        if (taskIndex === -1) return;
        
        pauseAllTasks();
        
        const currentTask = tasks[taskIndex];
        currentTask.isRunning = true;
        
        clearInterval(timerInterval);
        timerInterval = setInterval(() => updateTimer(taskId), 1000);
        
        updateTasksDisplay();
    }

    function pauseAllTasks() {
        tasks.forEach(task => task.isRunning = false);
    }

    function pauseTimer(taskId) {
        const taskIndex = tasks.findIndex(task => task.id === taskId);
        if (taskIndex === -1) return;
        
        const currentTask = tasks[taskIndex];
        currentTask.isRunning = false;
        
        clearInterval(timerInterval);
        updateTasksDisplay();
    }

    function updateTimer(taskId) {
        const taskIndex = tasks.findIndex(task => task.id === taskId);
        if (taskIndex === -1) return;
        
        const currentTask = tasks[taskIndex];
        
        if (!currentTask.isOpenEnded && currentTask.timeRemaining > 0) {
            currentTask.timeRemaining--;
        }
        currentTask.timeWorked++;
        totalTimeWorked++;
        
        if (!currentTask.isOpenEnded && currentTask.timeRemaining === 0) {
            finishTask(taskId);
        } else {
            updateTasksDisplay();
        }
    }

    function updateTasksDisplay() {
        activeTasksContainer.innerHTML = '';
        
        tasks.forEach((task) => {
            const taskElement = document.createElement('div');
            taskElement.className = 'active-task-box';
            taskElement.style.backgroundColor = task.isRunning ? 'var(--accent-color)' : 'var(--card-background)';
            taskElement.style.color = task.isRunning ? 'white' : 'var(--text-color)';
            
            const timeDisplay = task.isOpenEnded 
                ? `Time: ${formatTime(task.timeWorked)}`
                : `Remaining: ${formatTime(task.timeRemaining)}`;
            
            taskElement.innerHTML = `
                <h3>${task.icon} ${task.name}</h3>
                <p>${timeDisplay}</p>
                <div class="task-buttons">
                    <button onclick="${task.isRunning ? `pauseTimer(${task.id})` : `startTimer(${task.id})`}" class="btn">
                        ${task.isRunning ? '<i class="fas fa-pause"></i> Pause' : '<i class="fas fa-play"></i> Resume'}
                    </button>
                    <button onclick="finishTask(${task.id})" class="btn btn-secondary">
                        <i class="fas fa-flag-checkered"></i> Finish
                    </button>
                </div>
            `;
            
            activeTasksContainer.appendChild(taskElement);
        });

        updateTotalTimeWorkedDisplay();
    }

    function formatTime(seconds) {
        const h = Math.floor(seconds / 3600);
        const m = Math.floor((seconds % 3600) / 60);
        const s = seconds % 60;
        return [h, m, s].map(v => v.toString().padStart(2, '0')).join(':');
    }

    function finishTask(taskId) {
        const taskIndex = tasks.findIndex(task => task.id === taskId);
        if (taskIndex === -1) return;
        
        const finishedTask = tasks[taskIndex];
        clearInterval(timerInterval);
        alarm.play();

        const taskItem = document.createElement('li');
        taskItem.classList.add('task-item');
        taskItem.innerHTML = `
            <span class="task-name">${finishedTask.icon} ${finishedTask.name}</span>
            <span class="task-time">${formatTime(finishedTask.timeWorked)}</span>
        `;
        taskListEl.prepend(taskItem);

        // Remove the finished task
        tasks.splice(taskIndex, 1);

        updateTasksDisplay();
    }

    function updateTotalTimeWorkedDisplay() {
        totalTimeWorkedEl.textContent = formatTime(totalTimeWorked);
    }

    startBtn.addEventListener('click', startNewTask);
    resetBtn.addEventListener('click', () => {
        tasks = [];
        totalTimeWorked = 0;
        clearInterval(timerInterval);
        updateTasksDisplay();
        taskListEl.innerHTML = '';  // Clear finished tasks list
    });

    updateTasksDisplay();
</script>
</body>
</html>
